INTRO

What is a Databse Management System (DBMS)?

		A tool for creating and managing large amounts of data efficiently and allowing it to persist 
		over long periods of time, safely. 
		
		
1.1 The Evolution of Database Systems

	What is a database?
	
		A collection of information that exists over a long period of time, often many years. It refers
		to a collection of data managed by a DBMS.
		
	What does a DBMS do?
	
		1. Allows users to create new databases and specify schemas using a data-definition language (DDL).
		2. Gives users the ability to query and modify the data via query language or data-manipulation
		   language (DML).
		3. Supports storage of massive amounts of data over a long period of time with efficient access for
		   queries / modifications.
		4. Enables durability (recovery of database in the face of failures, errors, or misuse).
		5. Control access to data from many users at once without allowing unexpected interactions amongst
		   users (isolation) and without actions on data to be performed partially, but not completely 
		   (atomicity).
		   
		   
	1.1.1 Early Database Management Systems
	
	
	Disdvantages of a File System in Comparison With DBMS
	
		1. Cannot guarantee that data cannot be lost if not backed up.
		2. No efficient access to data items whose locations are not known.
		3. No way of filtering and accessing data in a timely manner.
		4. will not prevent situations such as two users modifying the same file at about the same time, so 
		   the changes made by one user fail to appear in the file.
	   
	
	1.1.2 Relational Database Systems
	
	
		Ted Codd in 1970 proposed that database systems should present the user with a view of data organized 
		as tables called relations.
	
	
	1.1.3 Smaller and Smaller Systems
	
	
		Database systems based on the relational model have become available for even very small machines.
	
	
	1.1.4 Bigger and Bigger Systems
	
	
		Corporate databases routinely store terabytes (1012 bytes). Yet there are many databases that store 
		petabytes (101S bytes) of data and serve it all to users.
	
	
	1.1.5 Information Integration
	
	
		It has become necessary with increasing frequency to build structures on top of existing databases, 
		with the goal of integrating the information distributed among them. One popular approach is the 
		creation of data warehouses, where information from many legacy databases is copied periodically,
		with the appropriate translation, to a central database. Another approach is the implementation of 
		a mediator, or “middleware,” whose function is to support an integrated model of the data of the 
		various databases, while translating between this model and the actual models used by each database.
	
	
1.2 Overview of a Database Management System

	There are 2 distinct sources of commands to the DBMS:
	
		1. Conventional users and application programs that ask for data or modify data.
		2. A database administrator: a person or persons responsible for the structure or schema of the
		   database.
		   
	
	1.2.1 Data-Definition Language Commands
	
	
		Schema-altering data-definition language (DDL) commands are parsed by a DDL processor and passed to 
		the execution engine, which then goes through the index/file/record manager to alter the metadata, 
		that is, the schema information for the database.
	
	
	1.2.2 Overview of Query Processing
	
	
		Answering the Query
		
			1. Query is parsed and optimized by a query compiler.
			2. Resulting query plan, or sequence of actions the DBMS will perform to answer the query, is
			   passed to the execution engine. 
			3. Execution engine issues a sequence of requests for small pieces of data, typically records 
			   or tuples of a relation, to a resource manager that knows about data files (holding relations),
			   the format and size of records in those files, and index files, which help find elements of
			   data files quickly.
			4. The requests for data are passed to the buffer manager. The buffer manager’s task is to bring 
			   appropriate portions of the data from secondary storage (disk) where it is kept permanently, 
			   to the main-memory buffers.
			5. The buffer manager communicates with a storage manager to get data from disk. The storage 
			   manager might involve operating-system commands, but more typically, the DBMS issues commands 
			   directly to the disk controller.
			   
		Transaction Processing
		
			Queries and other DML actions are grouped into transactions, which are units that must be executed 
			atomically and in isolation from one another. Any query or modification action can be a transaction 
			by itself. 
			
			The execution of transactions must be durable, meaning that the effect of any completed transaction 
			must be preserved even if the system fails in some way right after completion of the transaction.
			
			We divide the transaction processor into two major parts:
			
				1. A concurrency-control manager, or scheduler, responsible for assuring atomicity and isolation 
				  of transactions.
				2. A logging and recovery manager, responsible for the durability of transactions.
			
			
	1.2.3 Storage and Buffer Management
	
		The data of a database normally resides in secondary storage; in today’s computer systems “secondary storage” 
		generally means magnetic disk. However, to perform any useful operation on data, that data must be in main 
		memory. It is the job of the storage manager to control the placement of data on disk and its movement 
		between disk and main memory.
		
		The storage manager keeps track of the location of files on the disk and obtains the block or blocks 
		containing a file on request from the buffer manager.
		
		All DBMS components that need information from the disk will interact with the buffers and the buffer manager, 
		either directly or through the execution engine. The kinds of information that various components may need 
		include:
		
			1. Data: the contents of the database itself.
			2. Metadata: the database schema that describes the structure of, and constraints on, the database.
			3. Log Records: information about recent changes to the database; these	support durability of the database.
			4. Statistics: information gathered and stored by the DBMS about data properties such as the sizes of, and 
			   values in, various relations or other components of the database.
			5. Indexes: data structures that support efficient access to the data.
			
			
	1.2.4 Transaction Processing