JSON - JavaScript Object Notation

	- Standard for "serializing" data objects, usually in files.
	- Human-readable, useful for data interchange.
	
	
Base Constructs:

	- Base values:
		- number, string, boolean
		
	- Composite values:
		- objects {}
		- arrays []
		
		
Relational Model vs JSON

	- Structure: Tables vs Sets, Arrays
	- Schema: Fixed in advance vs "Self-describing" data (schema within data itself so more flexible)
	- Queries: Simple vs Nothing widely used
	- Ordering: None vs Arrays (ordered)
	- Implementation: Native systems vs Coupled with programming languages (also used in NoSQL systems)
	
	
XML vs JSON

	- Verbosity: More verbose vs Less verbose
	- Complexity: More complex vs Less complex
	- Validity: DTDs / XSD vs JSON schema  
	- Programming Interface: Clunky, "Impedence mismatch" vs More direct
	- Querying: XPath, XQuery, XSLT vs JSON Path, JSON Query, JAQL
	
	
Syntactically valid JSON adheres to basic structural requirements.
	- Sets of label-value pairs
	- Arrays of values
	- Base values from predefined types
	
	Start with JSON file ----> JSON Parser ----> File has syntax errors or it's correct
	Can be correct syntactically, but not necessarily semantically AKA not conforming to schema
	